{"ts":1356914138170,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * A module for retrieving information about Users from Foursquare.\n * @param {Object} config A valid configuration.\n * @module node-foursquare/Users\n */\nmodule.exports = function(config) {\n  var core = require(\"./core\")(config),\n    log4js = require(\"log4js\");\n\n  log4js.configure(config.log4js);\n  var logger = log4js.getLogger(\"node-foursquare.Users\");\n  \n  /**\n   * Returns the leaderboard for the User identified by the supplied accessToken.\n   * @memberof module:node-foursquare/Users\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/leaderboard.html\n   */\n  function getLeaderboard(params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getLeaderboard\");\n    core.callApi(\"/users/leaderboard\", accessToken, params || {}, callback);\n  }\n\n  /**\n   * Find Foursquare Users.\n   * @memberof module:node-foursquare/Users\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/search.html\n   */\n  function search(params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.search\");\n    core.callApi(\"/users/search\", accessToken, params || {}, callback);\n  }\n\n\n  /**\n   * Retrieve Friend Requests for the user identified by the supplied accessToken.\n   * @memberof module:node-foursquare/Users\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/requests.html\n   */\n  function getRequests(accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getRequests\");\n    core.callApi(\"/users/requests\", accessToken, {}, callback);\n  }\n\n  /**\n   * Retrieve a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} userId The id of the User to retreive.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/users.html\n   */\n  function getUser(userId, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getUser\");\n\n    if(!userId) {\n      logger.error(\"getUser: userId is required.\");\n      callback(new Error(\"Users.getUser: userId is required.\"));\n      return;\n    }\n\n    core.callApi(\"/users/\" + userId, accessToken, null, callback);\n  }\n\n  /**\n   * Retreive a named aspect for a User from the Foursquare API.\n   * @memberof module:node-foursquare/Users\n   * @param {String} aspect The aspect to retrieve. Refer to Foursquare documentation for details on currently\n   * supported aspects.\n   * @param {String} [userId=\"self\"] The id of the User to retreive.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/index_docs.html\n   */\n  function getUserAspect(aspect, userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getUser\");\n\n    if(!aspect) {\n      logger.error(\"getUserAspect: aspect is required.\");\n      callback(new Error(\"Users.getUserAspect: aspect is required.\"));\n      return;\n    }\n    \n    core.callApi(\"/users/\" + (userId || \"self\") + \"/\" + aspect, accessToken, params, callback);\n  }\n\n  /**\n   * Retrieve a list of badges.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/badges.html\n   */\n  function getBadges(userId, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getBadges\");\n    getUserAspect(\"badges\", userId, null, accessToken, callback);\n  }\n\n  /**\n   * Retrieve Check-ins for a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/checkins.html\n   */\n  function getCheckins(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getCheckins\");\n    getUserAspect(\"checkins\", userId, params, accessToken, callback);\n  }\n\n  /**\n   * Retrieve Friends for a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/friends.html\n   */\n  function getFriends(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getFriends\");\n    getUserAspect(\"friends\", userId, params, accessToken, callback);\n  }\n\n\n  /**\n   * Retrieve Friends for a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/friends.html\n   */\n  function getMayorships(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getMayorships\");\n    getUserAspect(\"mayorships\", userId, params, accessToken, callback);\n  }\n\n  /**\n   * Retrieve Tips for a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String|Number} [params.lat] The latitude of the location around which to search.\n   * @param {String|Number} [params.lng] The longitude of the location around which to search.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/tips.html\n   */\n  function getTips(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getTips\");\n    getUserAspect(\"tips\", userId, params, accessToken, callback);\n  }\n\n  /**\n   * Retrieve Todos for a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String|Number} [params.lat] The latitude of the location around which to search.\n   * @param {String|Number} [params.lng] The longitude of the location around which to search.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/todos.html\n   */\n  function getTodos(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getTodos\");\n    params = params || {};\n    params.sort = params.sort || \"recent\";\n    getUserAspect(\"todos\", userId, params, accessToken, callback);\n  }\n\n  /**\n   * Retrieve Venues visited by a Foursquare User.\n   * @memberof module:node-foursquare/Users\n   * @param {String} [userId=\"self\"] The id of the user.\n   * @param {Object} [params] An object containing additional parameters. Refer to Foursquare documentation for details\n   * on currently supported parameters.\n   * @param {String} accessToken The access token provided by Foursquare for the current user.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/users/venuehistory.html\n   */\n  function getVenueHistory(userId, params, accessToken, callback) {\n    logger.debug(\"ENTERING: Users.getVenueHistory\");\n    getUserAspect(\"venuehistory\", userId, params, accessToken, callback);\n  }\n\n  return {\n    \"getLeaderboard\" : getLeaderboard,\n    \"search\" : search,\n    \"getRequests\" : getRequests,\n    \"getUser\" : getUser,\n    \"getUserAspect\" : getUserAspect,\n    \"getBadges\" : getBadges,\n    \"getCheckins\" : getCheckins,\n    \"getFriends\" : getFriends,\n    \"getMayorships\" : getMayorships,\n    \"getTips\" : getTips,\n    \"getTodos\" : getTodos,\n    \"getVenueHistory\" : getVenueHistory\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":10387}]],"length":10387}
