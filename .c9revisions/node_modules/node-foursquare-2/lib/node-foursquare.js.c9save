{"ts":1356913938358,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * A NodeJS module for interfacing with Foursquare.\n * @module node-foursquare\n * @version 0.1.3\n * @author Clint Andrew Hall\n * @description A NodeJS module for interacting with Foursquare.\n * @param {Object} config A valid configuration.\n */\nvar qs = require('querystring'),\n  sys = require(\"util\"),\n  defaultConfig = require(\"./config-default\"),\n  log4js = require(\"log4js\");\n\nfunction mergeDefaults(o1, o2) {\n  for(var p in o2) {\n    try {\n      if(typeof o2[p] == \"object\") {\n        o1[p] = mergeDefaults(o1[p], o2[p]);\n      } else if(typeof o1[p] == \"undefined\") {\n        o1[p] = o2[p];\n      }\n    } catch(e) {\n      o1[p] = o2[p];\n    }\n  }\n\n  return o1;\n}\n\nmodule.exports = function(config) {\n\n  function getLogger(config) {\n    log4js.configure(config.log4js);\n    return log4js.getLogger(\"node-foursquare\");\n  }\n\n  function configure(config) {\n    config = config || {};\n    mergeDefaults(config, defaultConfig);\n\n    var logger = getLogger(config);\n\n    if(!config.secrets || !config.secrets.clientId || !config.secrets.clientSecret || !config.secrets.redirectUrl) {\n      logger.error(\"Client configuration not supplied; add config.secrets information, (clientId, clientSecret, redirectUrl).\");\n      throw new Error(\"Configuration Error: Client information not supplied.\");\n    }\n\n    if(!config.foursquare.accessTokenUrl || !config.foursquare.apiUrl) {\n      logger.error(\"Foursquare configuration not supplied; add config.foursquare information, (accessTokenUrl, apiUrl)\");\n      throw new TypeError(\"Configuration Error: Foursquare information not supplied.\");\n    }\n\n    if(!config.foursquare.version || config.foursquare.version === \"LATEST\") {\n      var d = new Date(), month = d.getMonth() + 1, date = d.getDate();\n      config.foursquare.version = d.getFullYear() + ((month < 10 ? \"0\" : \"\") + month) + ((date < 10 ? \"0\" : \"\") + date);\n      logger.warn(\"Foursquare API version not defined in configuration; defaulting to latest: \" + config.foursquare.version);\n    }\n\n    return config;\n  }\n\n  config = configure(config);\n\n  var logger = getLogger(config),\n    core = require(\"./core\")(config);\n\n  logger.debug(\"Configuration: \" + sys.inspect(config));\n\n  /**\n   * Exchange a user authorization code for an access token.\n   * @memberof module:node-foursquare\n   * @param {Object} params A collection of parameters for the Access Token request.\n   * @param {String} params.code The code provided by Foursquare as the result of the user redirect.\n   * @param {String} [params.grant_type=\"authorization_code\"] The type of authorization to request.\n   * @param {Function} callback The function to call with results, function({Error} error, {Object} results).\n   * @see https://developer.foursquare.com/docs/oauth.html\n   */\n  function getAccessToken(params, callback) {\n    params = params || {};\n    params.grant_type = params.grant_type || \"authorization_code\";\n    params.client_id = config.secrets.clientId;\n    params.client_secret = config.secrets.clientSecret;\n    params.redirect_uri = config.secrets.redirectUrl;\n\n    core.retrieve(config.foursquare.accessTokenUrl + \"?\" + qs.stringify(params),\n      function(error, status, result) {\n        if(error) {\n          callback(error);\n        }\n        else {\n          try {\n            callback(null, JSON.parse(result).access_token);\n          }\n          catch(e) {\n            callback(e);\n          }\n        }\n      });\n  }\n\n  /**\n   * Build and return an appropriate Authorization URL where the user can grant permission to the application.\n   * @memberof module:node-foursquare\n   */\n  function getAuthClientRedirectUrl() {\n    return config.foursquare.authenticateUrl + \"?client_id=\" + config.secrets.clientId + \"&response_type=code&redirect_uri=\" + config.secrets.redirectUrl;\n  }\n\n  return {\n    \"Users\" : require(\"./users\")(config),\n    \"Venues\" : require(\"./venues\")(config),\n    \"Checkins\" : require(\"./checkins\")(config),\n    \"Tips\" : require(\"./tips\")(config),\n    \"Lists\" : require(\"./lists\")(config),\n    \"Photos\" : require(\"./photos\")(config),\n    \"Settings\" : require(\"./settings\")(config),\n    \"Specials\" : require(\"./specials\")(config),\n    \"Updates\" : require(\"./updates\")(config),\n    \"Events\" : require(\"./events\")(config),\n    \"getAccessToken\" : getAccessToken,\n    \"getAuthClientRedirectUrl\" : getAuthClientRedirectUrl\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":4335}]],"length":4335}
