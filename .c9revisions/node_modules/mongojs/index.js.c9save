{"ts":1350360231296,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var mongo = require('mongodb');\nvar common = require('common');\nvar url = require('url');\n\nvar noop = function() {};\n\nvar createObjectId = function() {\n\tif (!mongo.BSONNative || !mongo.BSONNative.ObjectID) {\n\t  return function(id) {\n\t\treturn mongo.BSONPure.ObjectID.createFromHexString(id);\n\t  };\n\t}\n\treturn function(id) {\n\t\treturn new mongo.BSONNative.ObjectID(id);\n\t};\n}();\nvar parseURL = function(options) {\n\tif (typeof options === 'object') {\n\t\toptions.host = options.host || '127.0.0.1';\n\t\toptions.port = parseInt(options.port || 27017, 10);\n\t\treturn options;\n\t}\n\tif (/^[^:\\/]+$/.test(options)) {\n\t\toptions = 'mongodb://127.0.0.1:27017/'+options;\n\t}\n\n\tvar parsed = url.parse('mongodb://'+options.replace('mongodb://', ''));\n\tvar result = {};\n\n\tresult.username = parsed.auth && parsed.auth.split(':')[0];\n\tresult.password = parsed.auth && parsed.auth.split(':')[1];\n\tresult.db = (parsed.pathname || '').substr(1);\n\tresult.host = parsed.hostname;\n\tresult.port = parsed.port;\n\n\treturn parse(result);\n};\nvar parse = function(options) {\n\toptions = parseURL(options);\n\n\tif (options.replSet && Array.isArray(options.replSet)) {\n\t\toptions.replSet = {members:options.replSet};\n\t}\n\tif (options.replSet) {\n\t\tif (!options.replSet.members) {\n\t\t\tthrow new Error('replSet.members required');\n\t\t}\n\t\toptions.replSet.members = options.replSet.members.map(parseURL);\n\t}\n\n\treturn options;\n};\nvar shouldExtend = function(that, proto, name) {\n\tif (name[0] === '_') return false;\n\treturn !that[name] && !proto.__lookupGetter__(name) && typeof proto[name] === 'function';\n};\n\n// basicly just a proxy prototype\nvar Cursor = function(oncursor) {\n\tthis._oncursor = oncursor;\n};\n\nCursor.prototype.toArray = function() {\n\tthis._exec('toArray', arguments);\n};\nCursor.prototype.next = function() {\n\tthis._exec('nextObject', arguments);\n};\nCursor.prototype.forEach = function() {\n\tthis._exec('each', arguments);\n};\nCursor.prototype.count = function() {\n\tthis._exec('count', arguments);\n};\nCursor.prototype.sort = function() {\n\treturn this._config('sort', arguments);\n};\nCursor.prototype.limit = function(a) {\n\treturn this._config('limit', arguments);\n};\nCursor.prototype.skip = function() {\n\treturn this._config('skip', arguments);\n};\n\nCursor.prototype._config = function(name, args) {\n\tif (typeof args[args.length-1] === 'function') {\n\t\targs = Array.prototype.slice.call(args);\n\n\t\tvar callback = args.pop();\n\n\t\tthis._exec(name, args).toArray(callback);\n\t\treturn;\n\t}\n\treturn this._exec(name, args);\n};\nCursor.prototype._exec = function(name, args) {\n\tvar callback = typeof args[args.length-1] === 'function' ? args[args.length-1] : noop;\n\n\tthis._oncursor.get(common.fork(callback, function(cur) {\n\t\tcur[name].apply(cur, args);\n\t}));\n\treturn this;\n};\n\nvar Collection = function(oncollection) {\n\tthis._oncollection = oncollection;\n};\n\nCollection.prototype.find = function() {\n\tvar args = Array.prototype.slice.call(arguments);\n\tvar oncursor = common.future();\n\tvar oncollection = this._oncollection;\n\n\t// we provide sugar for doing find(query, callback) -> find(query).toArray(callback);\n\tif (typeof args[args.length-1] === 'function') {\n\t\tvar callback = args.pop();\n\n\t\toncursor.get(common.fork(callback, function(cur) {\n\t\t\tcur.toArray(callback);\n\t\t}));\n\t}\n\n\tcommon.step([\n\t\tfunction(next) {\n\t\t\toncollection.get(next);\n\t\t},\n\t\tfunction(col, next) {\n\t\t\targs.push(next);\n\t\t\tcol.find.apply(col, args);\n\t\t},\n\t\tfunction(cur) {\n\t\t\toncursor.put(null, cur);\n\t\t}\n\t], oncursor.put);\n\n\treturn new Cursor(oncursor);\n};\nCollection.prototype.findOne = function() { // see http://www.mongodb.org/display/DOCS/Queries+and+Cursors\n\tvar args = Array.prototype.slice.call(arguments);\n\tvar callback = args.pop();\n\n\tthis.find.apply(this, args).limit(1).next(callback);\n};\nCollection.prototype.findAndModify = function(options, callback) {\n\tthis._exec('findAndModify', [options.query, options.sort || [], options.update || {}, {\n\t\tnew:!!options.new,\n\t\tremove:!!options.remove,\n\t\tupsert:!!options.upsert,\n\t\tfields:options.fields\n\t}, callback]);\n};\nCollection.prototype.remove = function() {\n\tthis._exec('remove', arguments.length === 0 ? [{}] : arguments); // driver has a small issue with zero-arguments in remove\n};\nCollection.prototype.group = function(group, callback) {\n\tthis._exec('group', [group.key, group.cond, group.initial, group.reduce, group.finalize, true], callback);\n};\nCollection.prototype.disconnect = function() {\n\tthis.close();\n};\n\nCollection.prototype._exec = function(name, args) {\n\tvar callback = typeof args[args.length-1] === 'function' ? args[args.length-1] : noop;\n\n\tthis._oncollection.get(common.fork(callback, function(col) {\n\t\tvar old = col.opts.safe;\n\n\t\tif (callback !== noop) {\n\t\t\tcol.opts.safe = true;\n\t\t}\n\t\tcol[name].apply(col, args);\n\t\tcol.opts.safe = old;\n\t}));\n};\n\nObject.keys(mongo.Collection.prototype).forEach(function(name) { // we just wanna proxy any remaining methods on collections\n\tif (shouldExtend(Collection.prototype, mongo.Collection.prototype, name)) {\n\t\tCollection.prototype[name] = function() {\n\t\t\tthis._exec(name, arguments);\n\t\t};\n\t}\n});\n\nvar connect = function(url, collections) {\n\turl = parse(url);\n\tcollections = collections || url.collections;\n\n\tvar that = {};\n\tvar ondb = common.future();\n\n\tcommon.step([\n\t\tfunction(next) {\n\t\t\tvar replSet = url.replSet && new mongo.ReplSetServers(url.replSet.members.map(function(member) {\n\t\t\t\treturn new mongo.Server(member.host, member.port, {auto_reconnect:true});\n\t\t\t}), {\n\t\t\t\tread_secondary:url.replSet.slaveOk,\n\t\t\t\trs_name:url.replSet.name\n\t\t\t});\n\n\t\t\tvar client = new mongo.Db(url.db, replSet || new mongo.Server(url.host, url.port, {auto_reconnect:true}), {safe:false});\n\n\t\t\tthat.client = client;\n\t\t\tthat.bson = {\n\t\t\t\tLong:      client.bson_serializer.Long,\n\t\t\t\tObjectID:  client.bson_serializer.ObjectID,\n\t\t\t\tTimestamp: client.bson_serializer.Timestamp,\n\t\t\t\tDBRef:     client.bson_serializer.DBRef,\n\t\t\t\tBinary:    client.bson_serializer.Binary,\n\t\t\t\tCode:      client.bson_serializer.Code\n\t\t\t};\n\n\t\t\tclient.open(next);\n\t\t},\n\t\tfunction(db, next) {\n\t\t\tthis.db = db;\n\n\t\t\tif (url.username) {\n\t\t\t\tdb.authenticate(url.username, url.password, next);\n\t\t\t} else {\n\t\t\t\tnext(null, true);\n\t\t\t}\n\t\t},\n\t\tfunction(success) {\n\t\t\tif (!success) {\n\t\t\t\tondb.put(new Error('invalid username or password'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tondb.put(null, this.db);\n\t\t}\n\t], ondb.put);\n\n\tthat.ObjectId = createObjectId;\n\tthat.collection = function(name) {\n\t\tvar oncollection = common.future();\n\n\t\tcommon.step([\n\t\t\tfunction(next) {\n\t\t\t\tondb.get(next);\n\t\t\t},\n\t\t\tfunction(db, next) {\n\t\t\t\tdb.collection(name, next);\n\t\t\t},\n\t\t\tfunction(col) {\n\t\t\t\toncollection.put(null, col);\n\t\t\t}\n\t\t], oncollection.put);\n\n\t\treturn new Collection(oncollection);\n\t};\n\n\tObject.keys(mongo.Db.prototype).forEach(function(name) {\n\t\tif (shouldExtend(that, mongo.Db.prototype, name)) {\n\t\t\tthat[name] = function() {\n\t\t\t\tvar args = arguments;\n\t\t\t\tvar callback = args[args.length-1] || noop;\n\n\t\t\t\tondb.get(common.fork(callback, function(db) {\n\t\t\t\t\tdb[name].apply(db, args);\n\t\t\t\t}));\n\t\t\t};\n\t\t}\n\t});\n\n\tif (collections) {\n\t\tcollections.forEach(function(col) {\n\t\t\tthat[col] = that.collection(col);\n\t\t});\n\t}\n\tif (typeof Proxy !== 'undefined') {\n\t\treturn Proxy.create({\n\t\t\tget: function(proxy, name) {\n\t\t\t\tif (!that[name]) {\n\t\t\t\t\tthat[name] = that.collection(name);\n\t\t\t\t}\n\t\t\t\treturn that[name];\n\t\t\t}\n\t\t});\n\t}\n\n\treturn that;\n};\n\nexports = module.exports = connect;\nexports.ObjectId = createObjectId;\nexports.connect = exports; // for backwards compat"]],"start1":0,"start2":0,"length1":0,"length2":7419}]],"length":7419}
{"contributors":[],"silentsave":false,"ts":1350360260169,"patch":[[{"diffs":[[0,"ions) {\n"],[1,"    console.log('connecting');\n"],[0,"\turl = p"]],"start1":5075,"start2":5075,"length1":16,"length2":47}]],"length":7450,"saved":false}
