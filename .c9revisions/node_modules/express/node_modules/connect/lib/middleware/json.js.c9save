{"ts":1349660433815,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Connect - json\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils')\n  , _limit = require('./limit');\n\n/**\n * noop middleware.\n */\n\nfunction noop(req, res, next) {\n  next();\n}\n\n/**\n * JSON:\n *\n * Parse JSON request bodies, providing the\n * parsed object as `req.body`.\n *\n * Options:\n *\n *   - `strict`  when `false` anything `JSON.parse()` accepts will be parsed\n *   - `reviver`  used as the second \"reviver\" argument for JSON.parse\n *   - `limit`  byte limit disabled by default\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(options){\n  var options = options || {}\n    , strict = options.strict === false\n      ? false\n      : true;\n\n  var limit = options.limit\n    ? _limit(options.limit)\n    : noop;\n\n  return function json(req, res, next) {\n    if (req._body) return next();\n    req.body = req.body || {};\n\n    // check Content-Type\n    if ('application/json' != utils.mime(req)) return next();\n\n    // flag as parsed\n    req._body = true;\n\n    // parse\n    limit(req, res, function(err){\n      if (err) return next(err);\n      var buf = '';\n      req.setEncoding('utf8');\n      req.on('data', function(chunk){ buf += chunk });\n      req.on('end', function(){\n        if (strict && '{' != buf[0] && '[' != buf[0]) return next(utils.error(400, 'invalid json'));\n        try {\n          req.body = JSON.parse(buf, options.reviver);\n          next();\n        } catch (err){\n          err.body = buf;\n          err.status = 400;\n          next(err);\n        }\n      });\n    });\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":1657}]],"length":1657}
