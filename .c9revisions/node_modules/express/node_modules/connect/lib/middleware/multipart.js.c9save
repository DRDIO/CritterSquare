{"ts":1349660535829,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * Connect - multipart\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar formidable = require('formidable')\n  , _limit = require('./limit')\n  , utils = require('../utils')\n  , qs = require('qs');\n\n/**\n * noop middleware.\n */\n\nfunction noop(req, res, next) {\n  next();\n}\n\n/**\n * Multipart:\n * \n * Parse multipart/form-data request bodies,\n * providing the parsed object as `req.body`\n * and `req.files`.\n *\n * Configuration:\n *\n *  The options passed are merged with [formidable](https://github.com/felixge/node-formidable)'s\n *  `IncomingForm` object, allowing you to configure the upload directory,\n *  size limits, etc. For example if you wish to change the upload dir do the following.\n *\n *     app.use(connect.multipart({ uploadDir: path }));\n *\n * Options:\n *\n *   - `limit`  byte limit defaulting to none\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(options){\n  options = options || {};\n\n  var limit = options.limit\n    ? _limit(options.limit)\n    : noop;\n\n  return function multipart(req, res, next) {\n    if (req._body) return next();\n    req.body = req.body || {};\n    req.files = req.files || {};\n\n    // ignore GET\n    if ('GET' == req.method || 'HEAD' == req.method) return next();\n\n    // check Content-Type\n    if ('multipart/form-data' != utils.mime(req)) return next();\n\n    // flag as parsed\n    req._body = true;\n\n    // parse\n    limit(req, res, function(err){\n      if (err) return next(err);\n\n      var form = new formidable.IncomingForm\n        , data = {}\n        , files = {}\n        , done;\n\n      Object.keys(options).forEach(function(key){\n        form[key] = options[key];\n      });\n\n      function ondata(name, val, data){\n        if (Array.isArray(data[name])) {\n          data[name].push(val);\n        } else if (data[name]) {\n          data[name] = [data[name], val];\n        } else {\n          data[name] = val;\n        }\n      }\n\n      form.on('field', function(name, val){\n        ondata(name, val, data);\n      });\n\n      form.on('file', function(name, val){\n        ondata(name, val, files);\n      });\n\n      form.on('error', function(err){\n        next(err);\n        done = true;\n      });\n\n      form.on('end', function(){\n        if (done) return;\n        try {\n          req.body = qs.parse(data);\n          req.files = qs.parse(files);\n          next();\n        } catch (err) {\n          next(err);\n        }\n      });\n\n      form.parse(req);\n    });\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2545}]],"length":2545}
